name: Proto-Bloom CI/CD

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  NODE_VERSION: '20'

jobs:
  # QUALITY CHECKS (parallel)
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - run: npm run lint

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - run: npx tsc --noEmit

  # DETERMINE ENVIRONMENT
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      app-name: ${{ steps.set-env.outputs.app-name }}
      should-deploy: ${{ steps.set-env.outputs.should-deploy }}
    steps:
      - name: Determine environment from branch
        id: set-env
        run: |
          REF="${{ github.ref }}"
          echo "Branch/Ref: $REF"
          
          case "$REF" in
            refs/heads/main)
              ENV="production"
              APP_NAME="lpa-proto-bloom"
              SHOULD_DEPLOY="true"
              ;;
            refs/heads/staging)
              ENV="staging"
              APP_NAME="lpa-proto-bloom"
              SHOULD_DEPLOY="true"
              ;;
            refs/heads/develop)
              ENV="development"
              APP_NAME="lpa-proto-bloom"
              SHOULD_DEPLOY="true"
              ;;
            *)
              ENV="preview"
              APP_NAME="lpa-proto-bloom"
              SHOULD_DEPLOY="false"
              ;;
          esac
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "app-name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "‚úÖ Environment: $ENV | App: $APP_NAME | Deploy: $SHOULD_DEPLOY"

  # BUILD APPLICATION
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [determine-environment, lint, type-check]
    if: |
      always() &&
      needs.determine-environment.outputs.should-deploy == 'true' &&
      needs.lint.result == 'success' &&
      needs.type-check.result == 'success'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      
      - name: Build Application
        run: |
          echo "Building Proto-Bloom application..."
          echo "Environment: ${{ needs.determine-environment.outputs.environment }}"
          npm run build
          echo "‚úÖ Build finished"
        env:
          VITE_ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 7

  # DEPLOY APPLICATION
  deploy:
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    if: |
      always() &&
      needs.determine-environment.outputs.should-deploy == 'true' &&
      needs.build.result == 'success'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      
      - name: Verify build artifacts
        run: |
          echo "üîç Verifying build artifacts..."
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå dist/index.html not found!"
            exit 1
          fi
          echo "‚úÖ Build artifacts verified"
          ls -la dist/
      
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: '.'
          output_location: 'dist'
      
      - name: Post deployment notification
        run: |
          echo "‚úÖ Successfully deployed to ${{ needs.determine-environment.outputs.environment }} environment"
          echo "üåê Application URL: https://${{ needs.determine-environment.outputs.app-name }}.azurestaticapps.net"
