# Required for code scanning SARIF upload

# CI/CD Pipeline workflow
# Required for code scanning SARIF upload

permissions:
  actions: read
  contents: read
  security-events: write
name: CI/CD Pipeline

on:
  push:
    branches: [main, staging, develop, 'feature/**', 'bugfix/**', 'hotfix/**']
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run automated tests'
        required: false
        type: boolean
        default: false
      deployment_reason:
        description: 'Reason for manual deployment'
        required: false
        type: string
        default: 'Manual deployment trigger'
      runtime_urls_json:
        description: 'Optional JSON mapping of function app name -> runtime URL (injected by publisher)'
        required: false
        type: string
        default: ''

# Environment matrix for different branches
env:
  NODE_VERSION: '20'
  # Default debug panel setting for builds (can be overridden via repo vars)
  VITE_DEBUG_PANEL: 'false'

jobs:
  # PARALLEL QUALITY CHECKS (all run simultaneously)
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
      - run: npm run format:check

  type-check:
    name: TypeScript Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - run: npm run type-check

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - run: npm audit --audit-level=moderate || true # Don't fail on audit
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: sarif
          output: trivy-results.sarif

    # DETERMINE ENVIRONMENT BASED ON BRANCH
  determine-environment:
    name: Determine Target Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      app-name: ${{ steps.set-env.outputs.app-name }}
      should-deploy: ${{ steps.set-env.outputs.should-deploy }}
      should-test: ${{ steps.set-env.outputs.should-test }}
    steps:
      - name: Determine environment and deployment settings based on branch
        id: set-env
        run: |
          echo "🔍 Analyzing branch: ${{ github.ref }}"
          echo "📋 Branch name: ${{ github.ref_name }}"
          echo ""

          case "${{ github.ref }}" in
            "refs/heads/develop")
              echo "✅ Matched: develop branch"
              echo "🎯 Target Environment: development"
              echo "🏗️ App Name: lpa-frontend-dev"
              echo "🚀 Should Deploy: true"
              echo "🧪 Should Test: true"
              echo ""
              echo "environment=development" >> $GITHUB_OUTPUT
              echo "app-name=lpa-frontend-dev" >> $GITHUB_OUTPUT
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "should-test=true" >> $GITHUB_OUTPUT
              ;;
            "refs/heads/staging")
              echo "✅ Matched: staging branch"
              echo "🎯 Target Environment: staging"
              echo "🏗️ App Name: lpa-frontend-staging"
              echo "🚀 Should Deploy: true"
              echo "🧪 Should Test: true"
              echo ""
              echo "environment=staging" >> $GITHUB_OUTPUT
              echo "app-name=lpa-frontend-staging" >> $GITHUB_OUTPUT
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "should-test=true" >> $GITHUB_OUTPUT
              ;;
            "refs/heads/main")
              echo "✅ Matched: main branch"
              echo "🎯 Target Environment: production"
              echo "🏗️ App Name: lpa-frontend-prod"
              echo "🚀 Should Deploy: true"
              echo "🧪 Should Test: true"
              echo ""
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "app-name=lpa-frontend-prod" >> $GITHUB_OUTPUT
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "should-test=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "⚠️ No specific match found for branch: ${{ github.ref_name }}"
              echo "🎯 Defaulting to: development environment"
              echo "🏗️ App Name: lpa-frontend-dev"
              echo "🚀 Should Deploy: false"
              echo "🧪 Should Test: false"
              echo ""
              echo "environment=development" >> $GITHUB_OUTPUT
              echo "app-name=lpa-frontend-dev" >> $GITHUB_OUTPUT
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "should-test=false" >> $GITHUB_OUTPUT
              ;;
          esac

          echo ""
          echo "📤 Job outputs set:"
          echo "  - environment: $(cat $GITHUB_OUTPUT | grep environment | cut -d'=' -f2)"
          echo "  - app-name: $(cat $GITHUB_OUTPUT | grep app-name | cut -d'=' -f2)"
          echo "  - should-deploy: $(cat $GITHUB_OUTPUT | grep should-deploy | cut -d'=' -f2)"
          echo "  - should-test: $(cat $GITHUB_OUTPUT | grep should-test | cut -d'=' -f2)"

  # CONDITIONAL TESTS (only for staging/production)
  run-tests:
    name: Run Test Suite
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should-test == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }} # Uncommented to use environment-specific secrets
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Build application for testing
        run: npm run build:ci
      - name: Start preview server
        run: npm run preview -- --port 5174 --host 0.0.0.0 &
      - name: Wait for server to be ready
        run: |
          echo "Waiting for server to start on http://localhost:5174..."
          timeout 120 bash -c 'until curl -f http://localhost:5174 > /dev/null 2>&1; do sleep 2; echo "Still waiting..."; done' || (echo "Server failed to start after 2 minutes" && exit 1)
          echo "✅ Server is ready!"
      - name: Run Playwright End to End tests
        run: npm run test:prestaging
        env:
          DEBUG: pw:api
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: playwright-report/
          retention-days: 7

  # BUILD APPLICATION
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [determine-environment, lint, type-check, security, run-tests]
    if: |
      always() &&
      needs.determine-environment.outputs.should-deploy == 'true' &&
      needs.lint.result == 'success' &&
      needs.type-check.result == 'success' &&
      needs.security.result == 'success' &&
      (needs.run-tests.result == 'success' || needs.run-tests.result == 'skipped')
    environment: ${{ needs.determine-environment.outputs.environment }} # Uncommented to use environment-specific secrets
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - name: Build Application
        run: |
          echo "Building application (target environment provided by previous job)..."
          echo "🔍 Note: Runtime secrets are intentionally NOT provided to the build step."
          echo "✅ Starting build (no runtime secrets)."

          npm run build:ci
          echo "✅ Build finished. dist/ created."
        env:
          VITE_ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 1

      - name: Upload raw dist/index.html (pre-inject) for debugging
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dist-index-pre-inject
          path: dist/index.html
          retention-days: 3

      - name: Export runtime variables to GITHUB_ENV (for injector step)
        if: always()
        run: |
          echo "Exporting runtime vars into GITHUB_ENV for injector"
          # Always export build metadata
          echo "VITE_BUILD_ITERATION=${{ github.run_number }}" >> $GITHUB_ENV
          echo "VITE_BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

          # Set failure mode based on environment
          if [ "${{ needs.determine-environment.outputs.environment }}" = "development" ]; then
            echo "FAIL_ON_MISSING=true" >> $GITHUB_ENV
            echo "REQUIRED_KEYS=VITE_GTM_ID,VITE_OPENAI_API_KEY" >> $GITHUB_ENV
          else
            echo "FAIL_ON_MISSING=false" >> $GITHUB_ENV
            echo "REQUIRED_KEYS=" >> $GITHUB_ENV
          fi

          # Export known runtime VITE_* keys from repository secrets to GITHUB_ENV
          # For each key, if a dedicated secret exists, export it
          # For development, also check repository variables as fallbacks
          if [ -n "${{ secrets.VITE_GTM_ID }}" ]; then
            echo "VITE_GTM_ID=${{ secrets.VITE_GTM_ID }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "development" ] && [ -n "${{ vars.VITE_GTM_ID }}" ]; then
            echo "VITE_GTM_ID=${{ vars.VITE_GTM_ID }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "development" ]; then
            echo "VITE_GTM_ID=GTM-DEV-PLACEHOLDER" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ]; then
            echo "VITE_GTM_ID=GTM-STAGING-DISABLED" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "production" ]; then
            echo "VITE_GTM_ID=GTM-PRODUCTION-DISABLED" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.VITE_GA_MEASUREMENT_ID }}" ]; then
            echo "VITE_GA_MEASUREMENT_ID=${{ secrets.VITE_GA_MEASUREMENT_ID }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "development" ]; then
            echo "VITE_GA_MEASUREMENT_ID=GA-DEV-PLACEHOLDER" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ]; then
            echo "VITE_GA_MEASUREMENT_ID=GA-STAGING-DISABLED" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "production" ]; then
            echo "VITE_GA_MEASUREMENT_ID=GA-PRODUCTION-DISABLED" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.VITE_GOOGLE_ADS_ID }}" ]; then
            echo "VITE_GOOGLE_ADS_ID=${{ secrets.VITE_GOOGLE_ADS_ID }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "development" ]; then
            echo "VITE_GOOGLE_ADS_ID=AW-DEV-PLACEHOLDER" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ]; then
            echo "VITE_GOOGLE_ADS_ID=AW-STAGING-DISABLED" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "production" ]; then
            echo "VITE_GOOGLE_ADS_ID=AW-PRODUCTION-DISABLED" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.VITE_GOOGLE_ADS_CONVERSION_LABEL }}" ]; then
            echo "VITE_GOOGLE_ADS_CONVERSION_LABEL=${{ secrets.VITE_GOOGLE_ADS_CONVERSION_LABEL }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "development" ]; then
            echo "VITE_GOOGLE_ADS_CONVERSION_LABEL=DEV-CONVERSION" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ]; then
            echo "VITE_GOOGLE_ADS_CONVERSION_LABEL=STAGING-CONVERSION" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "production" ]; then
            echo "VITE_GOOGLE_ADS_CONVERSION_LABEL=PRODUCTION-CONVERSION" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.VITE_OPENAI_API_KEY }}" ]; then
            echo "VITE_OPENAI_API_KEY=${{ secrets.VITE_OPENAI_API_KEY }}" >> $GITHUB_ENV
          elif [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "VITE_OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ] && [ -n "${{ secrets.VITE_OPENAI_API_KEY_STAGING }}" ]; then
            echo "VITE_OPENAI_API_KEY=${{ secrets.VITE_OPENAI_API_KEY_STAGING }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ] && [ -n "${{ secrets.OPENAI_API_KEY_STAGING }}" ]; then
            echo "VITE_OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_STAGING }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "development" ]; then
            echo "VITE_OPENAI_API_KEY=sk-dev-placeholder-key" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ]; then
            echo "VITE_OPENAI_API_KEY=sk-staging-test-key" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "production" ]; then
            echo "VITE_OPENAI_API_KEY=sk-production-disabled" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.VITE_CHAT_ENABLED }}" ]; then
            echo "VITE_CHAT_ENABLED=${{ secrets.VITE_CHAT_ENABLED }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "development" ] && [ -n "${{ vars.VITE_CHAT_ENABLED }}" ]; then
            echo "VITE_CHAT_ENABLED=${{ vars.VITE_CHAT_ENABLED }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "development" ]; then
            echo "VITE_CHAT_ENABLED=false" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ]; then
            echo "VITE_CHAT_ENABLED=true" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "production" ]; then
            echo "VITE_CHAT_ENABLED=true" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.VITE_ASSESSMENT_ENABLED }}" ]; then
            echo "VITE_ASSESSMENT_ENABLED=${{ secrets.VITE_ASSESSMENT_ENABLED }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "development" ] && [ -n "${{ vars.VITE_ASSESSMENT_ENABLED }}" ]; then
            echo "VITE_ASSESSMENT_ENABLED=${{ vars.VITE_ASSESSMENT_ENABLED }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "development" ]; then
            echo "VITE_ASSESSMENT_ENABLED=true" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ]; then
            echo "VITE_ASSESSMENT_ENABLED=true" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "production" ]; then
            echo "VITE_ASSESSMENT_ENABLED=true" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.VITE_DEBUG_PANEL }}" ]; then
            echo "VITE_DEBUG_PANEL=${{ secrets.VITE_DEBUG_PANEL }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.VITE_BOOKING_URL }}" ]; then
            echo "VITE_BOOKING_URL=${{ secrets.VITE_BOOKING_URL }}" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "development" ]; then
            echo "VITE_BOOKING_URL=https://dev.booking.example.com" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ]; then
            echo "VITE_BOOKING_URL=https://staging.booking.example.com" >> $GITHUB_ENV
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "production" ]; then
            echo "VITE_BOOKING_URL=https://booking.life-psychology.com.au" >> $GITHUB_ENV
          fi

          # If runtime_urls_json was provided by publisher, attempt to extract the runtime URL for this app-name
          if [ -n "${{ github.event.inputs.runtime_urls_json }}" ]; then
            echo "Parsing provided runtime_urls_json to find runtime URL for app: ${{ needs.determine-environment.outputs.app-name }}"
            echo '${{ github.event.inputs.runtime_urls_json }}' > __runtime_urls.json
            # Attempt exact match first
            url=$(cat __runtime_urls.json | jq -r --arg key "${{ needs.determine-environment.outputs.app-name }}" '.[$key] // empty') || true
            if [ -z "$url" ]; then
              # Try matching by suffix (strip known prefixes)
              short=$(echo "${{ needs.determine-environment.outputs.app-name }}" | awk -F'-' '{print $NF}')
              url=$(cat __runtime_urls.json | jq -r --arg key "$short" '.[$key] // empty') || true
            fi
            if [ -n "$url" ]; then
              echo "VITE_RUNTIME_CONFIG_URL=$url" >> $GITHUB_ENV
              echo "Found runtime URL and exported VITE_RUNTIME_CONFIG_URL=$url"
            else
              echo "No runtime URL found for app-name; continuing with injector fallback"
            fi
          fi

      - name: Inject runtime envs into built index.html (committed injector)
        if: always()
        run: |
          echo "🔧 Starting runtime environment injection..."
          echo "📍 Current working directory: $(pwd)"
          echo "📁 Checking if dist/index.html exists..."
          if [ -f "dist/index.html" ]; then
            echo "✅ dist/index.html found"
            echo "📏 File size: $(stat -f%z dist/index.html 2>/dev/null || stat -c%s dist/index.html 2>/dev/null || echo 'unknown')"
          else
            echo "❌ dist/index.html not found!"
            ls -la dist/ || echo "dist directory contents unknown"
            exit 1
          fi

          echo "🔍 Checking for placeholders before injection..."
          PLACEHOLDER_COUNT=$(grep -c "__RUNTIME_VITE_" dist/index.html || echo "0")
          echo "📊 Found $PLACEHOLDER_COUNT runtime placeholders in index.html"

          echo "🌍 Environment variables available to injector:"
          env | grep -E "^(VITE_|REQUIRED_KEYS|FAIL_ON_MISSING)" | sort || echo "No VITE_* environment variables found"

          echo "💉 Running injector..."
          node scripts/inject-runtime-envs.cjs

      - name: Upload injected dist/index.html for debugging
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dist-index-post-inject
          path: dist/index.html
          retention-days: 7

      - name: Upload injector report JSON
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: injector-report
          path: dist/injector-report.json
          retention-days: 7

      - name: Upload final injected dist (canonical)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dist-injected
          path: dist
          retention-days: 3

      - name: Display injector results
        if: always()
        run: |
          if [ -f "dist/injector-report.json" ]; then
            echo "📄 Injector Report Summary:"
            cat dist/injector-report.json | jq '. | {totalActualReplacements, placeholdersPresent, perKeySummary}' 2>/dev/null || cat dist/injector-report.json
          else
            echo "⚠️  No injector report found"
          fi

      - name: Upload full dist for debugging (post-inject)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dist-full-post-inject
          path: dist
          retention-days: 7

      - name: Verify runtime injection worked
        run: |
          echo "🔍 Verifying runtime environment injection..."

          # Check if index.html exists
          if [ ! -f "dist/index.html" ]; then
            echo "❌ dist/index.html not found!"
            exit 1
          fi

          # Count remaining placeholders
          PLACEHOLDER_COUNT=$(grep -c "__RUNTIME_VITE_" dist/index.html || echo "0")

          if [ "$PLACEHOLDER_COUNT" -gt 0 ]; then
            echo "❌ CRITICAL: Found $PLACEHOLDER_COUNT unresolved runtime placeholders!"
            echo "📋 Listing remaining placeholders:"
            grep -n "__RUNTIME_VITE_" dist/index.html
            echo ""
            echo "🔧 This indicates runtime injection failed!"
            echo "💡 Check the injector logs above for details"
            exit 1
          else
            echo "✅ SUCCESS: No runtime placeholders remain!"
          fi

          # Check for actual injected values
          INJECTED_COUNT=$(grep -c "GTM-\|GA-\|AW-\|sk-\|true\|false\|https://" dist/index.html || echo "0")
          echo "📊 Found approximately $INJECTED_COUNT injected values"

          # Show a sample of the injected content (without exposing secrets)
          echo "🔍 Sample of injected environment variables:"
          grep -A 10 "window.__ENV_VARS__" dist/index.html | head -15 || echo "Could not find __ENV_VARS__ section"

  # DEPLOY APPLICATION
  deploy:
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, build, run-tests]
    if: |
      always() &&
      needs.determine-environment.outputs.should-deploy == 'true' &&
      needs.build.result == 'success' &&
      (needs.run-tests.result == 'success' || needs.run-tests.result == 'skipped')
    environment: ${{ needs.determine-environment.outputs.environment }} # Uncommented to use environment-specific secrets
    steps:
      - uses: actions/checkout@v4
      - name: Set deployment token
        run: echo "DEPLOY_TOKEN=${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}" >> $GITHUB_ENV
      - name: Download artifacts into separate folders (avoid overwrite)
        run: |
          mkdir -p artifacts
      - name: Download dist-injected (preferred)
        uses: actions/download-artifact@v4
        with:
          name: dist-injected
          path: artifacts/dist-injected
        continue-on-error: true
      - name: Download dist-full-post-inject (fallback 1)
        uses: actions/download-artifact@v4
        with:
          name: dist-full-post-inject
          path: artifacts/dist-full-post-inject
        continue-on-error: true
      - name: Download dist-index-post-inject (fallback 2)
        uses: actions/download-artifact@v4
        with:
          name: dist-index-post-inject
          path: artifacts/dist-index-post-inject
        continue-on-error: true
      - name: Download dist (pre-inject fallback)
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: artifacts/dist
        continue-on-error: true

      - name: Select best artifact and copy to deploy folder
        run: |
          echo "Selecting best available build artifact for deployment..."
          mkdir -p dist

          # Helper: check and copy if artifact exists and does not contain placeholders
          try_copy() {
            src="$1"
            if [ -f "$src/index.html" ]; then
              if grep -q "__RUNTIME_VITE_" "$src/index.html"; then
                echo "Found placeholders in $src/index.html - skipping"
                return 1
              else
                echo "Using artifact from: $src"
                cp -r "$src"/* dist/ || cp -r "$src" dist/ || true
                return 0
              fi
            else
              echo "No index.html in $src - skipping"
              return 1
            fi
          }

          # Priority: dist-injected -> dist-full-post-inject -> dist-index-post-inject -> artifacts/dist (pre-inject)
          try_copy "artifacts/dist-injected" && exit 0 || true
          try_copy "artifacts/dist-full-post-inject" && exit 0 || true
          try_copy "artifacts/dist-index-post-inject" && exit 0 || true

          echo "No fully injected artifact found in preferred list. If only pre-inject dist is available it will be used as a last resort (sanity check will still run)."
          if try_copy "artifacts/dist"; then
            echo "Copied pre-inject artifact into dist/ (last-resort)"
          else
            echo "ERROR: No build artifact available to deploy"
            ls -la artifacts || true
            exit 1
          fi
      - name: Sanity check injected dist/index.html (fail if placeholders remain)
        run: |
          echo "----- Sanity check: dist/index.html head -----"
          if [ -f dist/index.html ]; then
            # Show the top of the file so logs contain the injected values for debugging
            sed -n '1,160p' dist/index.html || true
            # Fail fast if any runtime placeholder tokens remain
            if grep -q "__RUNTIME_VITE_" dist/index.html; then
              echo "ERROR: dist/index.html contains runtime placeholders - aborting deploy"
              echo "If you expected the injector to run, check previous steps (inject-runtime-envs.cjs) and artifacts."
              exit 1
            else
              echo "Sanity check passed: no __RUNTIME_VITE_ placeholders found in dist/index.html"
            fi
          else
            echo "ERROR: dist/index.html not found - aborting deploy"
            exit 1
          fi
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: '.'
          output_location: 'dist'
      - name: Post deployment notification
        run: |
          echo "✅ Successfully deployed to ${{ needs.determine-environment.outputs.environment }} environment"
          echo "🌐 Application URL: https://${{ needs.determine-environment.outputs.app-name }}.azurestaticapps.net"
